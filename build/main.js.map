{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["/**\n * Created with @iobroker/create-adapter v2.1.1\n */\n\n// The adapter-core module gives you access to the core ioBroker functions\n// you need to create an adapter\nimport * as utils from \"@iobroker/adapter-core\";\nimport { throws } from \"assert\";\n\n// Load your modules here, e.g.:\n// import * as fs from \"fs\";\n\n// const {Device} = require('ps4-waker');\n//const {Detector} = require('ps4-waker').Detector;\nconst ps4waker = require('ps4-waker');\n\n//import * as ps4waker from \"ps4-waker\";\n\n\n//var ps4: typeof Device;\n//var detector = new Detector();\n\ninterface PlaystationDevice {\n\tname: string;\n\tip: string;\n}\n\nclass SonyPlaystation extends utils.Adapter {\n\n\tprivate pollAPITimer: NodeJS.Timeout | undefined;\n    private readonly pollAPIInterval: number;\n\n\tpublic constructor(options: Partial<utils.AdapterOptions> = {}) {\n\t\tsuper({\n\t\t\t...options,\n\t\t\tname: \"sony-playstation\",\n\t\t});\n\n\t\t// this.pollAPIInterval = 60_000 * 10;\n\t\tthis.pollAPIInterval = 60000;\n\n\t\tthis.on(\"ready\", this.onReady.bind(this));\n\t\tthis.on(\"stateChange\", this.onStateChange.bind(this));\n\t\tthis.on(\"objectChange\", this.onObjectChange.bind(this));\n\t\tthis.on(\"message\", this.onMessage.bind(this));\n\t\tthis.on(\"unload\", this.onUnload.bind(this));\n\t}\n\n\t/**\n\t * Is called when databases are connected and adapter received configuration.\n\t */\n\tprivate async onReady(): Promise<void> {\n\t\t// Initialize your adapter here\n\n\t\t// The adapters config (in the instance object everything under the attribute \"native\") is accessible via\n\t\t// this.config:\n\t\tthis.log.info(\"Search Timeout: \" + this.config.searchTimeOut);\n\n\t\t/*\n\t\tFor every state in the system there has to be also an object of type state\n\t\tHere a simple template for a boolean variable named \"testVariable\"\n\t\tBecause every adapter instance uses its own unique namespace variable names can't collide with other adapters variables\n\t\t*/\n\t\tawait this.setObjectNotExistsAsync(\"testVariable\", {\n\t\t\ttype: \"state\",\n\t\t\tcommon: {\n\t\t\t\tname: \"testVariable\",\n\t\t\t\ttype: \"boolean\",\n\t\t\t\trole: \"indicator\",\n\t\t\t\tread: true,\n\t\t\t\twrite: true,\n\t\t\t},\n\t\t\tnative: {},\n\t\t});\n\n\t\t// In order to get state updates, you need to subscribe to them. The following line adds a subscription for our variable we have created above.\n\t\tthis.subscribeStates(\"testVariable\");\n\t\t// You can also add a subscription for multiple states. The following line watches all states starting with \"lights.\"\n\t\t// this.subscribeStates(\"lights.*\");\n\t\t// Or, if you really must, you can also watch all states. Don't do this if you don't need to. Otherwise this will cause a lot of unnecessary load on the system:\n\t\t// this.subscribeStates(\"*\");\n\n\t\t/*\n\t\t\tsetState examples\n\t\t\tyou will notice that each setState will cause the stateChange event to fire (because of above subscribeStates cmd)\n\t\t*/\n\t\t// the variable testVariable is set to true as command (ack=false)\n\t\tawait this.setStateAsync(\"testVariable\", true);\n\n\t\t// same thing, but the value is flagged \"ack\"\n\t\t// ack should be always set to true if the value is received from or acknowledged from the target system\n\t\tawait this.setStateAsync(\"testVariable\", { val: true, ack: true });\n\n\t\t// same thing, but the state is deleted after 30s (getState will return null afterwards)\n\t\tawait this.setStateAsync(\"testVariable\", { val: true, ack: true, expire: 30 });\n\n\t\t// examples for the checkPassword/checkGroup functions\n\t\tlet result = await this.checkPasswordAsync(\"admin\", \"iobroker\");\n\t\tthis.log.info(\"check user admin pw iobroker: \" + result);\n\n\t\tresult = await this.checkGroupAsync(\"admin\", \"admin\");\n\t\tthis.log.info(\"check group user admin group admin: \" + result);\n\n\t\tthis.log.debug(\"synchronizing configuration with state\");\n\n\t\tawait this.syncConfig();\n\t\tthis.pollAPI();\n\t}\n\n\t/**\n\t * Is called when adapter shuts down - callback has to be called under any circumstances!\n\t */\n\tprivate onUnload(callback: () => void): void {\n\t\ttry {\n\t\t\t// Here you must clear all timeouts or intervals that may still be active\n\t\t\t// clearTimeout(timeout1);\n\t\t\t// clearTimeout(timeout2);\n\t\t\t// ...\n\t\t\t// clearInterval(interval1);\n\t\t\tthis.log.info(\"Shutting down Sony Playstation adapter\");\n\t\t\tcallback();\n\t\t} catch (e) {\n\t\t\tcallback();\n\t\t}\n\t}\n\n\t// If you need to react to object changes, uncomment the following block and the corresponding line in the constructor.\n\t// You also need to subscribe to the objects with `this.subscribeObjects`, similar to `this.subscribeStates`.\n\t/**\n\t * Is called if a subscribed object changes\n\t */\n\tprivate onObjectChange(id: string, obj: ioBroker.Object | null | undefined): void {\n\t\tif (obj) {\n\t\t\t// The object was changed\n\t\t\tthis.log.info(`object ${id} changed: ${JSON.stringify(obj)}`);\n\t\t} else {\n\t\t\t// The object was deleted\n\t\t\tthis.log.info(`object ${id} deleted`);\n\t\t}\n\t}\n\n\t/**\n\t * Is called if a subscribed state changes\n\t */\n\tprivate onStateChange(id: string, state: ioBroker.State | null | undefined): void {\n\t\tif (state) {\n\t\t\t// The state was changed\n\t\t\tthis.log.info(`state ${id} changed: ${state.val} (ack = ${state.ack})`);\n\t\t} else {\n\t\t\t// The state was deleted\n\t\t\tthis.log.info(`state ${id} deleted`);\n\t\t}\n\t}\n\n\t//If you need to accept messages in your adapter, uncomment the following block and the corresponding line in the constructor.\n\t/**\n\t * Some message was sent to this instance over message box. Used by email, pushover, text2speech, ...\n\t * Using this method requires \"common.messagebox\" property to be set to true in io-package.json\n\t */\n\tprivate onMessage(obj: ioBroker.Message): void {\n\t\tthis.log.info(\"onMessage called with: \"+obj.command);\n\t\tlet wait = false;\n\t\n\t\tswitch (obj.command) {\n\t\t\tcase \"send\":\n\t\t\t\t// e.g. send email or pushover or whatever\n\t\t\t\tthis.log.info(\"send command\");\n\n\t\t\t\t// Send response in callback if required\n\t\t\t\tif (obj.callback) this.sendTo(obj.from, obj.command, \"Message received\", obj.callback);\n\n\t\t\t\tbreak;\n\t\t\t\n\t\t\tcase \"browse\":\n\t\t\t\tthis.log.info(\"case 'browse' as command\");\n\t\t\t\tthis.browse(res => obj.callback && this.sendTo(obj.from, obj.command, res, obj.callback));\n\t\t\t\twait = true;\n\t\t\t\tbreak;\n\t\t\t\n\t\t\tdefault:\n\t\t\t\tthis.log.warn('Unknown command: ' + obj.command);\n\t\t\t\tbreak;\n\t\t}\n\t\t\n\t\tif (!wait && obj.callback) {\n            this.sendTo(obj.from, obj.command, obj.message, obj.callback);\n        }\n\t}\n\n\tprivate async syncConfig() {\n\t\tthis.log.debug(\"sync State\");\n\t\tconst devices = await this.getDevicesAsync();\n\n\t\tlet configDevices:PlaystationDevice[] = this.config.devices;\n\t\t\n\t\t/* for (let i = 0; i < devices.length; i++) {\n\t\t\t\n\t\t} */\n\t\tthis.log.debug(\"retrieved devices: \"+JSON.stringify(devices));\n\t\tthis.log.debug(\"configured devices: \"+JSON.stringify(configDevices));\n\n\t\tif (devices && devices.length) {\n\t\t\tlet missingDevices = [];\n\t\t\tlet toRemoveDevices = [];\n\t\t\tfor (let d = 0; d < devices.length; d++) {\n\t\t\t\tthis.log.debug(\"Device to check: \"+ JSON.stringify(devices[d]));\n\t\t\t\tlet states = await this.getStatesOfAsync(devices[d]._id);\n\t\t\t\tthis.log.debug(\"States: \"+JSON.stringify(states));\n\t\t\t\tfor (let s = 0; s < states.length; s++) {\n\t\t\t\t\tthis.log.debug(\"State: \"+JSON.stringify(states[s]));\n\t\t\t\t\tif (states[s].common.role === \"address\") {\n\t\t\t\t\t\tthis.log.debug(\"Verifying if the found device with the same address also exists in config\");\n\t\t\t\t\t\tlet state = await this.getStateAsync( states[s]._id);\n\t\t\t\t\t\tif (!state) {\n\t\t\t\t\t\t\tthis.log.warn(\"No State found for given State Obj: \"+JSON.stringify(states[s]));\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tlet foundExisting = false;\n\t\t\t\t\t\tfor (let c = 0; c < this.config.devices.length; c++ ) {\n\t\t\t\t\t\t\tthis.log.debug(\"Config IP: \"+this.config.devices[c].ip+ \" Device-State IP: \"+state.val);\n\t\t\t\t\t\t\tif (this.config.devices[c].ip === state.val) {\n\t\t\t\t\t\t\t\tthis.log.debug(\"Found Device with IP: \"+this.config.devices[c].ip);\n\t\t\t\t\t\t\t\tfoundExisting = true;\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t} \n\t\t\t\t\t\t\tthis.log.debug(\"Found missing Device with IP address: \"+this.config.devices[c].ip);\n\t\t\t\t\t\t\tmissingDevices.push(this.config.devices[c]);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(!foundExisting) {\n\t\t\t\t\t\t\tthis.log.debug(\"No config found for Device: \"+ JSON.stringify(devices[d]));\n\t\t\t\t\t\t\ttoRemoveDevices.push(devices[d]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis.log.debug(\"Devices to be removed: \"+toRemoveDevices.length);\n\t\t\t\tthis.log.debug(\"Devices to be added: \"+missingDevices.length);\n\n\t\t\t\ttoRemoveDevices.forEach(device => {\n\t\t\t\t\tthis.log.debug(\"remove Device, as it doesn't exist in Config: \"+JSON.stringify(device))\n\t\t\t\t\tthis.deleteDeviceAsync(device._id);\n\t\t\t\t});\n\n\t\t\t\tmissingDevices.forEach(device => {\n\t\t\t\t\tthis.log.debug(\"adding Device as found in config, but missing in devices: \"+JSON.stringify(device));\n\t\t\t\t\tthis.createDeviceChannel(device.name, device.ip);\n\t\t\t\t});\n\t\t\t}\n\t\t\t\n\t\t} else {\n\t\t\tthis.log.debug(\"only new config found, adding those\");\n\t\t\tfor (let r = 0; r < this.config.devices.length; r++) {\n\t\t\t\tif (!this.config.devices[r].ip) {\n\t\t\t\t\tthis.log.debug(\"Following device is missing an IP-Address: \"+JSON.stringify(this.config.devices[r]));\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tthis.log.debug(\"adding channel\");\n\t\t\t\tconst obj = await this.createDeviceChannel(this.config.devices[r].name, this.config.devices[r].ip);\n\t\t\t\tconst _obj = await this.getObjectAsync(obj.id);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate async createDeviceChannel(name: any, ip: any) {\n\t\tthis.log.debug(\"Create Device Channel with Name: \"+name+\" and IP: \"+ip);\n\t\tconst id = ip.replace(/[.\\s]+/g, '_');\n\t\tconst statesList: string[] = [];\n\t\t\n\t\tconst obj = await this.createDeviceAsync(id);\n\n\t\tthis.log.debug(\"Created Channel Obj: \"+JSON.stringify(obj));\n\n\t\tawait this.createStateAsync(id, '', 'state', { \n            type:   'string',\n            read:   true,\n            write:  true,\n            role:   'state',\n            name:   'Power Status Active'\n        });\n\n\t\tlet nameState = await this.createStateAsync(id, '', 'name', {\n\t\t\ttype:   'string',\n            read:   true,\n            write:  true,\n            role:   'name',\n            name:   'Name of Playstation'\n\t\t});\n\n\t\tthis.log.debug(\"created Name-State: \"+JSON.stringify(nameState));\n\n\t\tlet addressState = await this.createStateAsync(id, '', 'address', {\n\t\t\ttype:   'string',\n            read:   true,\n            write:  true,\n            role:   'address',\n            name:   'IP address of Playstation'\n\t\t});\n\n\t\tthis.log.debug(\"created Adress-State: \"+JSON.stringify(addressState));\n\n\t\tawait this.setStateAsync(id+\".name\", name);\n\n\t\tawait this.setStateAsync(id+\".address\", ip);\n\n\n\t\t/* await this.setObjectNotExistsAsync(id, {\n\t\t\ttype: \"state\",\n\t\t\tcommon: {\n\t\t\t\tname: \"powerStatusActive\",\n\t\t\t\ttype: \"string\",\n\t\t\t\trole: \"boolean\",\n\t\t\t\tread: true,\n\t\t\t\twrite: true,\n\t\t\t},\n\t\t\tnative: {},\n\t\t}); */\n\t\t\n\t\treturn obj;\n\t}\n\n\tprivate browse(callback: (res: any[]) => void) {\n\n\t\tthis.log.info(\"Browse function called\");\n\n\t\t//const result = [];\n\t\n\t\tvar deviceOptions = new Map();\n\t\t//deviceOptions.set(\"debug\",\"true\");\n\t\tdeviceOptions.set(\"timeout\", this.config.searchTimeOut);\n\t\n\t\t// var ps4 = new Device(deviceOptions);\n\t\n\t\t// try {\n\t\t// \tlet deviceStatus = ps4.getDeviceStatus();\n\t\t// \tthis.log.debug(\"Device Status: \"+deviceStatus.Status);\n\t\t// \tthis.log.debug(JSON.stringify(deviceStatus, null, 2));\n\t\t// \tfor (let i = 0; i < deviceStatus.)\n\t\t// \tresult.push(deviceStatus);\n\t\t// } catch (e) {\n\t\t// \tthis.log.debug(\"Failed to search for PS4\");\n\t\t// }\n\n\t\tthis.log.debug(\"Calling detector with options: \"+deviceOptions);\n\t\t//var discovery = Detector.detect(deviceOptions)\n\t\tvar detector = new ps4waker.Detector();\n\t\t// var discovery = detector.find(null, deviceOptions);\n\n\t\t//discovery is a promise ... \n\t\tvar discovery = ps4waker.Detector.findAny(deviceOptions, (err:any, device:any, rinfo:any) => {\n\n\t\t\tif (err === undefined) {\n\t\t\t\tthis.log.error(err.message);\n\t\t\t\tcallback(err);\n\t\t\t} else {\n\t\t\t\tthis.log.debug(\"discovered: \"+JSON.stringify(device, null, 2));\n\t\t\t\t\n\t\t\t\t//let obj = JSON.parse(device);\n\n\t\t\t\t//this.log.debug(\"as obj: \"+ obj);\n\t\t\t\tthis.log.debug(\"Name: \"+device['host-name']);\n\t\t\t\tthis.log.debug(\"address: \" + device['address']);\n\n\t\t\t\tlet result = [];\n\t\t\t\tif (device) {\n\t\t\t\t\tvar x = {ip:device['address']===undefined ? '' : device['address'], name:device['host-name']};\n\t\t\t\t\tthis.log.debug(\"adding to result: \"+x);\n\t\t\t\t\tresult.push(x)\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.log.info(\"calling callback\");\n\t\t\t\tcallback && callback(result);\n\t\t\t}\n\n\t\t\t\n\t\t\t\n\t\t});\n\t}\n\t\n\t/**\n     * Poll states from API and syncs them to ioBroker states\n     */\n\t private async pollAPI(): Promise<void> {\n\t\tthis.log.info(\"Poll PS4 state\");\n\n\t\tthis.config.devices.forEach(device => {\n\t\t\ttry {\n\t\t\t\tlet deviceOptions = {\n\t\t\t\t\t\"debug\":true,\n\t\t\t\t\t\"timeout\":parseInt(this.config.searchTimeOut)*1000,\n\t\t\t\t\t\"address\":device.ip,\n\t\t\t\t};\n\t\t\t\tthis.log.debug(\"Device Options: \"+JSON.stringify(deviceOptions));\n\t\t\t\tlet ps4Device = new ps4waker.Device(deviceOptions);\n\t\t\t\tthis.log.debug(\"retrieving device status for device with IP: \"+device.ip);\n\n\t\t\t\tps4Device.getDeviceStatus().then((element:any) => {\n\t\t\t\t\tthis.log.debug(`PS4-Device: ${JSON.stringify(element)}`);\n\t\t\t\t\tconst id = device.ip.replace(/[.\\s]+/g, '_');\n\t\t\t\t\tthis.setStateAsync(id+\".state\", element[\"status\"]);\n\t\t\t\t}, \n\t\t\t\t(error:Error) => {\n\t\t\t\t\tthis.log.warn(`Could not poll API: ${this.errorToText(error)}`);\n\t\t\t\t}).then(() => ps4Device.close());\n\n\t\t\t} catch (e) {\n\t\t\t\tthis.log.warn(`Could not poll API: ${this.errorToText(e)}`);\n\t\t\t}\n\t\t});\n\n\t\t\n\n        this.pollAPITimer = setTimeout(() => {\n            this.pollAPI();\n        }, this.pollAPIInterval);\n    }\n\n\t    /**\n     * Checks if a real error was thrown and returns message then, else it stringifies\n     *\n     * @param error any kind of thrown error\n     */\n\tprivate errorToText(error: unknown): string {\n\t\tif (error instanceof Error) {\n\t\t\treturn error.message;\n\t\t} else {\n\t\t\treturn JSON.stringify(error);\n\t\t}\n\t}\t\n}\n\n\nif (require.main !== module) {\n\t// Export the constructor in compact mode\n\tmodule.exports = (options: Partial<utils.AdapterOptions> | undefined) => new SonyPlaystation(options);\n} else {\n\t// otherwise start the instance directly\n\t(() => new SonyPlaystation())();\n}\n"],
  "mappings": "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",
  "names": []
}
